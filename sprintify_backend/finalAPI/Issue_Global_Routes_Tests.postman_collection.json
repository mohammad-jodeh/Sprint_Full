{
  "info": {
    "name": "Issue Global Routes Tests",
    "description": "Tests for the new global issue routes: get issues by user ID and get my assigned issues",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:4000/api/v1",
      "type": "string"
    },
    {
      "key": "authToken",
      "value": "your_jwt_token_here",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "550e8400-e29b-41d4-a716-446655440000",
      "type": "string",
      "description": "Replace with actual user ID"
    },
    {
      "key": "projectId",
      "value": "project-uuid-here",
      "type": "string",
      "description": "Replace with actual project ID for filtering"
    }
  ],
  "item": [
    {
      "name": "Get Issues Assigned to Specific User",
      "item": [
        {
          "name": "Get Issues by User ID - Basic",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/issues/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["issues", "{{userId}}"]
            },
            "description": "Get all issues assigned to a specific user by their user ID"
          },
          "response": []
        },
        {
          "name": "Get Issues by User ID - With Project Filter",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/issues/{{userId}}?projectId={{projectId}}",
              "host": ["{{baseUrl}}"],
              "path": ["issues", "{{userId}}"],
              "query": [
                {
                  "key": "projectId",
                  "value": "{{projectId}}",
                  "description": "Filter by specific project"
                }
              ]
            },
            "description": "Get issues assigned to a specific user filtered by project ID"
          },
          "response": []
        },
        {
          "name": "Get Issues by User ID - With Multiple Filters",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/issues/{{userId}}?projectId={{projectId}}&type=TASK&priority=1&searchTerm=bug",
              "host": ["{{baseUrl}}"],
              "path": ["issues", "{{userId}}"],
              "query": [
                {
                  "key": "projectId",
                  "value": "{{projectId}}",
                  "description": "Filter by project"
                },
                {
                  "key": "type",
                  "value": "TASK",
                  "description": "Filter by issue type (TASK, BUG, STORY, etc.)"
                },
                {
                  "key": "priority",
                  "value": "1",
                  "description": "Filter by priority (1=High, 2=Medium, 3=Low)"
                },
                {
                  "key": "searchTerm",
                  "value": "bug",
                  "description": "Search term for title/description"
                }
              ]
            },
            "description": "Get issues assigned to a specific user with multiple filters applied"
          },
          "response": []
        },
        {
          "name": "Get Issues by User ID - Invalid User ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/issues/00000000-0000-0000-0000-000000000000",
              "host": ["{{baseUrl}}"],
              "path": ["issues", "00000000-0000-0000-0000-000000000000"]
            },
            "description": "Test with invalid/non-existent user ID - should return 404"
          },
          "response": []
        },
        {
          "name": "Get Issues by User ID - No Authorization",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/issues/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["issues", "{{userId}}"]
            },
            "description": "Test without authorization token - should return 401"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Get My Assigned Issues",
      "item": [
        {
          "name": "Get My Assigned Issues - Basic",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/issues/my-assigned",
              "host": ["{{baseUrl}}"],
              "path": ["issues", "my-assigned"]
            },
            "description": "Get all issues assigned to the current authenticated user"
          },
          "response": []
        },
        {
          "name": "Get My Assigned Issues - With Project Filter",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/issues/my-assigned?projectId={{projectId}}",
              "host": ["{{baseUrl}}"],
              "path": ["issues", "my-assigned"],
              "query": [
                {
                  "key": "projectId",
                  "value": "{{projectId}}",
                  "description": "Filter by specific project"
                }
              ]
            },
            "description": "Get issues assigned to current user filtered by project"
          },
          "response": []
        },
        {
          "name": "Get My Assigned Issues - With All Filters",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/issues/my-assigned?projectId={{projectId}}&sprintId=sprint-uuid&statusId=status-uuid&epicId=epic-uuid&type=BUG&priority=1&searchTerm=urgent",
              "host": ["{{baseUrl}}"],
              "path": ["issues", "my-assigned"],
              "query": [
                {
                  "key": "projectId",
                  "value": "{{projectId}}",
                  "description": "Filter by project"
                },
                {
                  "key": "sprintId",
                  "value": "sprint-uuid",
                  "description": "Filter by sprint"
                },
                {
                  "key": "statusId",
                  "value": "status-uuid",
                  "description": "Filter by status"
                },
                {
                  "key": "epicId",
                  "value": "epic-uuid",
                  "description": "Filter by epic"
                },
                {
                  "key": "type",
                  "value": "BUG",
                  "description": "Filter by issue type"
                },
                {
                  "key": "priority",
                  "value": "1",
                  "description": "Filter by priority"
                },
                {
                  "key": "searchTerm",
                  "value": "urgent",
                  "description": "Search term"
                }
              ]
            },
            "description": "Get my assigned issues with all possible filters"
          },
          "response": []
        },
        {
          "name": "Get My Assigned Issues - No Authorization",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/issues/my-assigned",
              "host": ["{{baseUrl}}"],
              "path": ["issues", "my-assigned"]
            },
            "description": "Test without authorization - should return 401"
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// You can add pre-request scripts here",
          "// For example, to automatically get and set auth token"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test scripts",
          "pm.test('Response time is less than 2000ms', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(2000);",
          "});",
          "",
          "pm.test('Response has correct content type', function () {",
          "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
          "});"
        ]
      }
    }
  ]
}
