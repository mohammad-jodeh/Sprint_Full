{
	"info": {
		"_postman_id": "sprint-api-complete-2025",
		"name": "Sprint API - Complete Test Collection",
		"description": "Comprehensive API testing collection for Sprint Management System with enhanced filtering, issue types, and priority management",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "sprint-api-exporter"
	},
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{access_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"exec": [
					"// Global pre-request script",
					"console.log('Running Sprint API Test - ' + new Date().toISOString());"
				],
				"type": "text/javascript"
			}
		},
		{
			"listen": "test",
			"script": {
				"exec": [
					"// Global test script",
					"pm.test('Response time is less than 2000ms', function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(2000);",
					"});",
					"",
					"pm.test('Response has proper headers', function () {",
					"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
					"});"
				],
				"type": "text/javascript"
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:3000/api/v1",
			"type": "string"
		},
		{
			"key": "access_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "user_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "project_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "issue_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "bug_issue_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "story_issue_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "task_issue_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "epic_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "sprint_id",
			"value": "",
			"type": "string"
		},		{
			"key": "status_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "board_column_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "project_member_id",
			"value": "",
			"type": "string"
		}
	],
	"item": [
		{
			"name": "üîê Authentication",
			"item": [
				{
					"name": "Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('User registration successful', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    if (response.data && response.data.id) {",
									"        pm.collectionVariables.set('user_id', response.data.id);",
									"        console.log('User ID set:', response.data.id);",
									"    }",
									"    ",
									"    pm.test('Response contains user data', function () {",
									"        pm.expect(response.data).to.have.property('id');",
									"        pm.expect(response.data).to.have.property('fullName');",
									"        pm.expect(response.data).to.have.property('email');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"fullName\": \"John Doe Sprint Tester\",\n  \"email\": \"john.sprint.test@example.com\",\n  \"password\": \"SecurePassword123!\",\n  \"image\": \"https://example.com/avatar.jpg\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/user/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"user",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Login successful', function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    ",
									"    pm.test('Response contains access token', function () {",
									"        pm.expect(response.data).to.have.property('accessToken');",
									"    });",
									"    ",
									"    if (response.data && response.data.accessToken) {",
									"        pm.collectionVariables.set('access_token', response.data.accessToken);",
									"        console.log('Access token set successfully');",
									"    }",
									"    ",
									"    if (response.data && response.data.user && response.data.user.id) {",
									"        pm.collectionVariables.set('user_id', response.data.user.id);",
									"        console.log('User ID confirmed:', response.data.user.id);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"john.sprint.test@example.com\",\n  \"password\": \"SecurePassword123!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/user/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üìÅ Projects",
			"item": [
				{
					"name": "Create Test Project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Project created successfully', function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    if (response.data && response.data.id) {",
									"        pm.collectionVariables.set('project_id', response.data.id);",
									"        console.log('Project ID set:', response.data.id);",
									"    }",
									"    ",
									"    pm.test('Project has correct properties', function () {",
									"        pm.expect(response.data).to.have.property('name', 'Sprint Test Project');",
									"        pm.expect(response.data).to.have.property('keyPrefix', 'STP');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Sprint Test Project\",\n  \"description\": \"A comprehensive project for testing Sprint API functionality\",\n  \"keyPrefix\": \"STP\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/project",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"project"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üéØ Issues Management",
			"item": [
				{
					"name": "Create Bug Issue (High Priority)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Bug issue created successfully', function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    if (response.data && response.data.id) {",
									"        pm.collectionVariables.set('bug_issue_id', response.data.id);",
									"        console.log('Bug Issue ID set:', response.data.id);",
									"    }",
									"    ",
									"    pm.test('Bug issue has correct type and priority', function () {",
									"        pm.expect(response.data).to.have.property('type', 'bug');",
									"        pm.expect(response.data).to.have.property('issuePriority', 2);",
									"        pm.expect(response.data).to.have.property('key').that.includes('STP-');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Critical Login Bug\",\n  \"description\": \"Users cannot login with their email address - critical security issue\",\n  \"storyPoint\": 8,\n  \"type\": \"bug\",\n  \"issuePriority\": 2,\n  \"assignee\": \"{{user_id}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/{{project_id}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{project_id}}",
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Story Issue (Medium Priority)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Story issue created successfully', function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    if (response.data && response.data.id) {",
									"        pm.collectionVariables.set('story_issue_id', response.data.id);",
									"        console.log('Story Issue ID set:', response.data.id);",
									"    }",
									"    ",
									"    pm.test('Story issue has correct type and priority', function () {",
									"        pm.expect(response.data).to.have.property('type', 'story');",
									"        pm.expect(response.data).to.have.property('issuePriority', 1);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"User Profile Management\",\n  \"description\": \"As a user, I want to manage my profile information so that I can keep my details up to date\",\n  \"storyPoint\": 5,\n  \"type\": \"story\",\n  \"issuePriority\": 1,\n  \"assignee\": \"{{user_id}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/{{project_id}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{project_id}}",
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Task Issue (Low Priority)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Task issue created successfully', function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    if (response.data && response.data.id) {",
									"        pm.collectionVariables.set('task_issue_id', response.data.id);",
									"        console.log('Task Issue ID set:', response.data.id);",
									"    }",
									"    ",
									"    pm.test('Task issue has correct type and priority', function () {",
									"        pm.expect(response.data).to.have.property('type', 'task');",
									"        pm.expect(response.data).to.have.property('issuePriority', 0);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Update Documentation\",\n  \"description\": \"Update API documentation with new endpoints and examples\",\n  \"storyPoint\": 2,\n  \"type\": \"task\",\n  \"issuePriority\": 0\n}"
						},
						"url": {
							"raw": "{{base_url}}/{{project_id}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{project_id}}",
								"issues"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üîç Filtering Tests",
			"item": [
				{
					"name": "Filter by Type Only - Bugs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Filter by type works correctly', function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    ",
									"    pm.test('All returned issues are bugs', function () {",
									"        if (response.data && response.data.issues) {",
									"            response.data.issues.forEach(issue => {",
									"                pm.expect(issue.type).to.equal('bug');",
									"            });",
									"        }",
									"    });",
									"    ",
									"    pm.test('Response contains expected structure', function () {",
									"        pm.expect(response.data).to.have.property('issues');",
									"        pm.expect(response.data).to.have.property('total');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{project_id}}/issues?type=bug",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{project_id}}",
								"issues"
							],
							"query": [
								{
									"key": "type",
									"value": "bug",
									"description": "Filter by bug type only"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Filter by Priority Only - High (2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Filter by priority works correctly', function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    ",
									"    pm.test('All returned issues have high priority', function () {",
									"        if (response.data && response.data.issues) {",
									"            response.data.issues.forEach(issue => {",
									"                pm.expect(issue.issuePriority).to.equal(2);",
									"            });",
									"        }",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{project_id}}/issues?priority=2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{project_id}}",
								"issues"
							],
							"query": [
								{
									"key": "priority",
									"value": "2",
									"description": "Filter by high priority only"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Filter by Assignee Only",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Filter by assignee works correctly', function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    const currentUserId = pm.collectionVariables.get('user_id');",
									"    ",
									"    pm.test('All returned issues are assigned to current user', function () {",
									"        if (response.data && response.data.issues) {",
									"            response.data.issues.forEach(issue => {",
									"                pm.expect(issue.assignee).to.equal(currentUserId);",
									"            });",
									"        }",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{project_id}}/issues?assignee={{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{project_id}}",
								"issues"
							],
							"query": [
								{
									"key": "assignee",
									"value": "{{user_id}}",
									"description": "Filter by assignee only"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Combined Filter - Bug + High Priority",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Combined filter works correctly', function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    ",
									"    pm.test('All returned issues are bugs with high priority', function () {",
									"        if (response.data && response.data.issues) {",
									"            response.data.issues.forEach(issue => {",
									"                pm.expect(issue.type).to.equal('bug');",
									"                pm.expect(issue.issuePriority).to.equal(2);",
									"            });",
									"        }",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{project_id}}/issues?type=bug&priority=2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{project_id}}",
								"issues"
							],
							"query": [
								{
									"key": "type",
									"value": "bug",
									"description": "Filter by bug type"
								},
								{
									"key": "priority",
									"value": "2",
									"description": "Filter by high priority"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Triple Filter - Story + Medium Priority + Assigned",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Triple filter works correctly', function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    const currentUserId = pm.collectionVariables.get('user_id');",
									"    ",
									"    pm.test('All returned issues match all three filters', function () {",
									"        if (response.data && response.data.issues) {",
									"            response.data.issues.forEach(issue => {",
									"                pm.expect(issue.type).to.equal('story');",
									"                pm.expect(issue.issuePriority).to.equal(1);",
									"                pm.expect(issue.assignee).to.equal(currentUserId);",
									"            });",
									"        }",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{project_id}}/issues?type=story&priority=1&assignee={{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{project_id}}",
								"issues"
							],
							"query": [
								{
									"key": "type",
									"value": "story",
									"description": "Filter by story type"
								},
								{
									"key": "priority",
									"value": "1",
									"description": "Filter by medium priority"
								},
								{
									"key": "assignee",
									"value": "{{user_id}}",
									"description": "Filter by current user"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Issues (No Filter)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Get all issues works correctly', function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    ",
									"    pm.test('Returns all issue types and priorities', function () {",
									"        if (response.data && response.data.issues) {",
									"            pm.expect(response.data.issues.length).to.be.at.least(3);",
									"            ",
									"            // Check we have different types",
									"            const types = [...new Set(response.data.issues.map(issue => issue.type))];",
									"            pm.expect(types.length).to.be.at.least(2);",
									"            ",
									"            // Check we have different priorities",
									"            const priorities = [...new Set(response.data.issues.map(issue => issue.issuePriority))];",
									"            pm.expect(priorities.length).to.be.at.least(2);",
									"        }",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{project_id}}/issues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{project_id}}",
								"issues"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üìã Advanced Issue Operations",
			"item": [
				{
					"name": "Get My Assigned Issues",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('My assigned issues retrieved successfully', function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    const currentUserId = pm.collectionVariables.get('user_id');",
									"    ",
									"    pm.test('All issues are assigned to current user', function () {",
									"        if (response.data && Array.isArray(response.data)) {",
									"            response.data.forEach(issue => {",
									"                if (issue.assignee) {",
									"                    pm.expect(issue.assignee).to.equal(currentUserId);",
									"                }",
									"            });",
									"        }",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/issues/my-assigned?projectId={{project_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"issues",
								"my-assigned"
							],
							"query": [
								{
									"key": "projectId",
									"value": "{{project_id}}",
									"description": "Filter by current project"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Issue by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Issue retrieved by ID successfully', function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    ",
									"    pm.test('Issue contains all required fields', function () {",
									"        pm.expect(response.data).to.have.property('id');",
									"        pm.expect(response.data).to.have.property('title');",
									"        pm.expect(response.data).to.have.property('type');",
									"        pm.expect(response.data).to.have.property('issuePriority');",
									"        pm.expect(response.data).to.have.property('key');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{project_id}}/issues/{{bug_issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{project_id}}",
								"issues",
								"{{bug_issue_id}}"
							]
						}
					},
					"response": []
				},				{
					"name": "Update Issue Type and Priority (PATCH)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Issue updated successfully', function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    ",
									"    pm.test('Issue type and priority updated correctly', function () {",
									"        pm.expect(response.data).to.have.property('type', 'story');",
									"        pm.expect(response.data).to.have.property('issuePriority', 1);",
									"        pm.expect(response.data).to.have.property('title').that.includes('Updated');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Updated: Critical Login Bug -> User Story\",\n  \"description\": \"Updated description: Convert bug to user story for better tracking\",\n  \"type\": \"story\",\n  \"issuePriority\": 1,\n  \"storyPoint\": 5\n}"
						},						"url": {
							"raw": "{{base_url}}/{{project_id}}/issues/{{bug_issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{project_id}}",
								"issues",
								"{{bug_issue_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Issue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Issue deleted successfully', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
									"});",
									"",
									"pm.test('Response indicates successful deletion', function () {",
									"    if (pm.response.code === 200) {",
									"        const response = pm.response.json();",
									"        pm.expect(response).to.have.property('message');",
									"        pm.expect(response.message).to.include('deleted');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{project_id}}/issues/{{task_issue_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{project_id}}",
								"issues",
								"{{task_issue_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üé≠ Edge Cases & Validation",
			"item": [
				{
					"name": "Filter with Invalid Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Invalid type filter handled gracefully', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 400]);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.test('No results for invalid type', function () {",
									"        if (response.data && response.data.issues) {",
									"            pm.expect(response.data.issues).to.be.an('array').that.is.empty;",
									"        }",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{project_id}}/issues?type=invalid_type",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{project_id}}",
								"issues"
							],
							"query": [
								{
									"key": "type",
									"value": "invalid_type",
									"description": "Test with invalid issue type"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Filter with Invalid Priority",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Invalid priority filter handled gracefully', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 400]);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.test('No results for invalid priority', function () {",
									"        if (response.data && response.data.issues) {",
									"            pm.expect(response.data.issues).to.be.an('array').that.is.empty;",
									"        }",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{project_id}}/issues?priority=999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{project_id}}",
								"issues"
							],
							"query": [
								{
									"key": "priority",
									"value": "999",
									"description": "Test with invalid priority value"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Empty Filter Results",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Empty filter results handled correctly', function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.test('Empty results structure is correct', function () {",
									"        pm.expect(response.data).to.have.property('issues').that.is.an('array');",
									"        pm.expect(response.data).to.have.property('total', 0);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{project_id}}/issues?assignee=non-existent-user-id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{project_id}}",
								"issues"
							],
							"query": [
								{
									"key": "assignee",
									"value": "non-existent-user-id",
									"description": "Test with non-existent user ID"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üõ†Ô∏è Utility",
			"item": [
				{
					"name": "Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Health check successful', function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test('Health check response is correct', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('status', 'ok');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/health-check",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"health-check"
							]
						}					},
					"response": []
				}
			]
		},
		{
			"name": "üèóÔ∏è Project Management - Full CRUD",
			"item": [
				{
					"name": "Get All Projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Projects retrieved successfully', function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.test('Response contains projects array', function () {",
									"        pm.expect(response.data).to.have.property('projects');",
									"        pm.expect(response.data.projects).to.be.an('array');",
									"    });",
									"    ",
									"    if (response.data.projects.length > 0) {",
									"        pm.test('Project has required fields', function () {",
									"            const project = response.data.projects[0];",
									"            pm.expect(project).to.have.property('id');",
									"            pm.expect(project).to.have.property('name');",
									"            pm.expect(project).to.have.property('keyPrefix');",
									"        });",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/project",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"project"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Project by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Project retrieved successfully', function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.test('Project details are correct', function () {",
									"        pm.expect(response.data).to.have.property('id');",
									"        pm.expect(response.data).to.have.property('name');",
									"        pm.expect(response.data).to.have.property('description');",
									"        pm.expect(response.data).to.have.property('keyPrefix');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/project/{{project_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"project",
								"{{project_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Project (PATCH)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Project updated successfully', function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.test('Project updates applied', function () {",
									"        pm.expect(response.data).to.have.property('name', 'Updated Sprint Test Project');",
									"        pm.expect(response.data).to.have.property('description').that.includes('Updated');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Updated Sprint Test Project\",\n  \"description\": \"Updated description for comprehensive Sprint API testing\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/project/{{project_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"project",
								"{{project_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üìã Epic Management",
			"item": [
				{
					"name": "Create Epic",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Epic created successfully', function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    if (response.data && response.data.id) {",
									"        pm.collectionVariables.set('epic_id', response.data.id);",
									"        console.log('Epic ID set:', response.data.id);",
									"    }",
									"    ",
									"    pm.test('Epic has correct properties', function () {",
									"        pm.expect(response.data).to.have.property('name', 'User Management Epic');",
									"        pm.expect(response.data).to.have.property('description');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"User Management Epic\",\n  \"description\": \"Epic for all user-related features and improvements\",\n  \"startDate\": \"2025-06-17T00:00:00.000Z\",\n  \"endDate\": \"2025-12-31T23:59:59.000Z\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/{{project_id}}/epic",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{project_id}}",
								"epic"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Epics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Epics retrieved successfully', function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.test('Response contains epics array', function () {",
									"        pm.expect(response.data).to.be.an('array');",
									"    });",
									"    ",
									"    if (response.data.length > 0) {",
									"        pm.test('Epic has required fields', function () {",
									"            const epic = response.data[0];",
									"            pm.expect(epic).to.have.property('id');",
									"            pm.expect(epic).to.have.property('name');",
									"        });",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{project_id}}/epic",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{project_id}}",
								"epic"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Epic by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Epic retrieved successfully', function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.test('Epic details are correct', function () {",
									"        pm.expect(response.data).to.have.property('id');",
									"        pm.expect(response.data).to.have.property('name');",
									"        pm.expect(response.data).to.have.property('description');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{project_id}}/epic/{{epic_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{project_id}}",
								"epic",
								"{{epic_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Epic (PATCH)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Epic updated successfully', function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.test('Epic updates applied', function () {",
									"        pm.expect(response.data).to.have.property('name', 'Updated User Management Epic');",
									"        pm.expect(response.data).to.have.property('description').that.includes('Enhanced');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Updated User Management Epic\",\n  \"description\": \"Enhanced epic for comprehensive user-related features and improvements\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/{{project_id}}/epic/{{epic_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{project_id}}",
								"epic",
								"{{epic_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Epic",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Epic deleted successfully', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
									"});",
									"",
									"pm.test('Response indicates successful deletion', function () {",
									"    if (pm.response.code === 200) {",
									"        const response = pm.response.json();",
									"        pm.expect(response).to.have.property('message');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{project_id}}/epic/{{epic_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{project_id}}",
								"epic",
								"{{epic_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üìä Board Column Management",
			"item": [
				{
					"name": "Create Board Column",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Board column created successfully', function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    if (response.data && response.data.id) {",
									"        pm.collectionVariables.set('board_column_id', response.data.id);",
									"        console.log('Board Column ID set:', response.data.id);",
									"    }",
									"    ",
									"    pm.test('Board column has correct properties', function () {",
									"        pm.expect(response.data).to.have.property('name', 'In Review');",
									"        pm.expect(response.data).to.have.property('position', 2);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"In Review\",\n  \"position\": 2\n}"
						},
						"url": {
							"raw": "{{base_url}}/{{project_id}}/board-column",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{project_id}}",
								"board-column"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Board Columns",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Board columns retrieved successfully', function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.test('Response contains board columns array', function () {",
									"        pm.expect(response.data).to.be.an('array');",
									"    });",
									"    ",
									"    if (response.data.length > 0) {",
									"        pm.test('Board column has required fields', function () {",
									"            const column = response.data[0];",
									"            pm.expect(column).to.have.property('id');",
									"            pm.expect(column).to.have.property('name');",
									"            pm.expect(column).to.have.property('position');",
									"        });",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{project_id}}/board-column",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{project_id}}",
								"board-column"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Board Column (PATCH)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Board column updated successfully', function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.test('Board column updates applied', function () {",
									"        pm.expect(response.data).to.have.property('name', 'Code Review');",
									"        pm.expect(response.data).to.have.property('position', 3);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Code Review\",\n  \"position\": 3\n}"
						},
						"url": {
							"raw": "{{base_url}}/{{project_id}}/board-column/{{board_column_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{project_id}}",
								"board-column",
								"{{board_column_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Board Column",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Board column deleted successfully', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
									"});",
									"",
									"pm.test('Response indicates successful deletion', function () {",
									"    if (pm.response.code === 200) {",
									"        const response = pm.response.json();",
									"        pm.expect(response).to.have.property('message');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{project_id}}/board-column/{{board_column_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{project_id}}",
								"board-column",
								"{{board_column_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üë• User Management",
			"item": [
				{
					"name": "Get All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Users retrieved successfully', function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.test('Response contains users array', function () {",
									"        pm.expect(response.data).to.be.an('array');",
									"    });",
									"    ",
									"    if (response.data.length > 0) {",
									"        pm.test('User has required fields', function () {",
									"            const user = response.data[0];",
									"            pm.expect(user).to.have.property('id');",
									"            pm.expect(user).to.have.property('fullName');",
									"            pm.expect(user).to.have.property('email');",
									"        });",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/user",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('User retrieved successfully', function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.test('User details are correct', function () {",
									"        pm.expect(response.data).to.have.property('id');",
									"        pm.expect(response.data).to.have.property('fullName');",
									"        pm.expect(response.data).to.have.property('email');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/user/{{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"user",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User Profile (PATCH)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('User updated successfully', function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.test('User updates applied', function () {",
									"        pm.expect(response.data).to.have.property('fullName', 'John Doe Updated');",
									"        pm.expect(response.data).to.have.property('image').that.includes('updated');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"fullName\": \"John Doe Updated\",\n  \"image\": \"https://example.com/updated-avatar.jpg\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/user/{{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"user",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change User Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Password changed successfully', function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.test('Password change confirmed', function () {",
									"        pm.expect(response).to.have.property('message');",
									"        pm.expect(response.message).to.include('password');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"currentPassword\": \"SecurePassword123!\",\n  \"newPassword\": \"NewSecurePassword123!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/user/change-password",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"user",
								"change-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('User deleted successfully', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
									"});",
									"",
									"pm.test('Response indicates successful deletion', function () {",
									"    if (pm.response.code === 200) {",
									"        const response = pm.response.json();",
									"        pm.expect(response).to.have.property('message');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/user/{{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"user",
								"{{user_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ü§ù Project Members Management",
			"item": [
				{
					"name": "Add Project Member",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Project member added successfully', function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    if (response.data && response.data.id) {",
									"        pm.collectionVariables.set('project_member_id', response.data.id);",
									"        console.log('Project Member ID set:', response.data.id);",
									"    }",
									"    ",
									"    pm.test('Project member has correct properties', function () {",
									"        pm.expect(response.data).to.have.property('role');",
									"        pm.expect(response.data).to.have.property('userId');",
									"        pm.expect(response.data).to.have.property('projectId');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userId\": \"{{user_id}}\",\n  \"role\": \"MEMBER\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/{{project_id}}/project-members",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{project_id}}",
								"project-members"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Project Members",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Project members retrieved successfully', function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.test('Response contains project members array', function () {",
									"        pm.expect(response.data).to.be.an('array');",
									"    });",
									"    ",
									"    if (response.data.length > 0) {",
									"        pm.test('Project member has required fields', function () {",
									"            const member = response.data[0];",
									"            pm.expect(member).to.have.property('id');",
									"            pm.expect(member).to.have.property('role');",
									"            pm.expect(member).to.have.property('userId');",
									"        });",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{project_id}}/project-members",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{project_id}}",
								"project-members"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üîß System & Health",
			"item": [
				{
					"name": "Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Health check passed', function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",									"    pm.test('Service is healthy', function () {",
									"        pm.expect(response).to.have.property('status', 'OK');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/health-check",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"health-check"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}
